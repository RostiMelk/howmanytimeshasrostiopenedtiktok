{"ast":null,"code":"'use strict';\n\nconst VERSION = '1.0.0';\nconst MINUTE = 60;\nconst HOUR = 3600;\nconst DAY = 86400;\nconst WEEK = 604800;\nconst MONTH = 2629800;\nconst YEAR = String(new Date().getYear()).substr(1);\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst MONTHSL = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst LONG = {\n  NOW: \"just now\",\n  MIN: \" minute ago\",\n  MINS: \" minutes ago\",\n  HOUR: \" hour ago\",\n  HOURS: \" hours ago\",\n  DAY: \"yesterday\",\n  DAYS: \" days ago\",\n  WEEK: ' week ago',\n  WEEKS: ' weeks ago'\n};\nconst MID = {\n  NOW: \"now\",\n  MIN: \"min\",\n  MINS: \"mins\",\n  HOUR: \"hr\",\n  HOURS: \"hrs\",\n  DAY: \"dy\",\n  DAYS: \"dys\",\n  WEEK: 'wk',\n  WEEKS: 'wks'\n};\nconst SHORT = {\n  NOW: \"n\",\n  MIN: \"m\",\n  MINS: \"m\",\n  HOUR: \"h\",\n  HOURS: \"h\",\n  DAY: \"d\",\n  DAYS: \"d\",\n  WEEK: 'w',\n  WEEKS: 'w'\n};\n\nclass TimeLapsed {\n  static get version() {\n    return VERSION;\n  }\n\n  static fromTimestamp(seconds, notation = undefined, unsafe = true) {\n    if (isNaN(seconds) && unsafe) {\n      throw new Error(\"Bad timestamp\");\n    } else if (isNaN(seconds) && !unsafe) {\n      return 'N/A';\n    }\n\n    let secondsLapsed = (Date.now() - Number(seconds)) / 1000;\n    return this.deductSeconds(secondsLapsed, 'timestampStr', seconds, notation);\n  }\n\n  static fromDateString(dateStr, notation = undefined, unsafe = true) {\n    if (isNaN(Date.parse(String(dateStr))) && unsafe) {\n      throw new Error(\"Bad datestring\");\n    } else if (isNaN(Date.parse(String(dateStr))) && !unsafe) {\n      return 'N/A';\n    }\n\n    let secondsLapsed = (Date.now() - Date.parse(String(dateStr))) / 1000;\n    return this.deductSeconds(secondsLapsed, 'dateStrStr', dateStr, notation);\n  }\n\n  static parsedateStr(rawObj, type, notation) {\n    let thedateStr = undefined;\n\n    if (type === 'dateStrStr') {\n      thedateStr = new Date(String(rawObj));\n    } else if (type === 'timestampStr') {\n      thedateStr = new Date(Number(rawObj));\n    } else {\n      throw new Error(\"Unknown datetime format!\");\n    }\n\n    let theDate = thedateStr.getDate();\n    let timestrings = undefined;\n    let monthStr = undefined;\n\n    if (notation === 'twitter' || notation === 'mid') {\n      monthStr = MONTHS;\n    } else if (notation === 'lng' || notation === undefined || notation === null) {\n      monthStr = MONTHSL;\n    } else {\n      throw new Error(\"Unknown notation format!\");\n    }\n\n    let theMonth = monthStr[thedateStr.getMonth()];\n    let theYear = String(thedateStr.getYear()).substr(1);\n    if (theYear < YEAR) return theDate + ' ' + theMonth + ' ' + theYear;else {\n      if (theDate < 10) return '0' + theDate + ' ' + theMonth;else return theDate + ' ' + theMonth;\n    }\n  }\n\n  static floorTimeCalc(timeCalced) {\n    return Math.floor(timeCalced);\n  }\n\n  static deductSeconds(secondsLapsed, type, rawObj, notation) {\n    let timestrings = undefined;\n\n    if (notation === 'twitter') {\n      timestrings = SHORT;\n    } else if (notation === 'mid') {\n      timestrings = MID;\n    } else if (notation === 'lng' || notation === undefined || notation === null) {\n      timestrings = LONG;\n    } else {\n      throw new Error(\"Unknown notation format!\");\n    }\n\n    let postTime = undefined;\n\n    if (secondsLapsed < MINUTE) {\n      postTime = timestrings.NOW;\n    } else if (secondsLapsed >= MINUTE && secondsLapsed < HOUR) {\n      postTime = secondsLapsed / MINUTE;\n      postTime = this.floorTimeCalc(postTime);\n\n      if (postTime === 1) {\n        postTime += timestrings.MIN;\n      } else {\n        postTime += timestrings.MINS;\n      }\n    } else if (secondsLapsed >= HOUR && secondsLapsed < DAY) {\n      postTime = secondsLapsed / HOUR;\n      postTime = this.floorTimeCalc(postTime);\n\n      if (postTime === 1) {\n        postTime += timestrings.HOUR;\n      } else {\n        postTime += timestrings.HOURS;\n      }\n    } else if (secondsLapsed >= DAY && secondsLapsed < WEEK) {\n      postTime = secondsLapsed / DAY;\n      postTime = this.floorTimeCalc(postTime);\n\n      if (postTime === 1) {\n        if (timestrings === LONG) postTime = timestrings.DAY;else postTime += timestrings.DAY;\n      } else {\n        postTime += timestrings.DAYS;\n      }\n    } else if (secondsLapsed >= WEEK && secondsLapsed < MONTH) {\n      postTime = secondsLapsed / WEEK;\n      postTime = this.floorTimeCalc(postTime);\n\n      if (postTime === 1) {\n        if (timestrings === LONG) postTime += timestrings.WEEK;else postTime += timestrings.WEEK;\n      } else {\n        postTime += timestrings.WEEKS;\n      }\n    } else {\n      if (type === 'dateStrStr') {\n        postTime = this.parsedateStr(rawObj, type = 'dateStrStr', notation);\n      } else if (type === 'timestampStr') {\n        postTime = this.parsedateStr(rawObj, type = 'timestampStr', notation);\n      }\n    }\n\n    return postTime;\n  }\n\n}\n\nmodule.exports = TimeLapsed;","map":{"version":3,"sources":["/Users/rostimelk/sites/howmanytimeshasrostiopenedtiktok/client/node_modules/timelapsed/index.js"],"names":["VERSION","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","String","Date","getYear","substr","MONTHS","MONTHSL","LONG","NOW","MIN","MINS","HOURS","DAYS","WEEKS","MID","SHORT","TimeLapsed","version","fromTimestamp","seconds","notation","undefined","unsafe","isNaN","Error","secondsLapsed","now","Number","deductSeconds","fromDateString","dateStr","parse","parsedateStr","rawObj","type","thedateStr","theDate","getDate","timestrings","monthStr","theMonth","getMonth","theYear","floorTimeCalc","timeCalced","Math","floor","postTime","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst VERSION = '1.0.0';\nconst MINUTE = 60;\nconst HOUR = 3600;\nconst DAY = 86400;\nconst WEEK = 604800;\nconst MONTH = 2629800;\nconst YEAR = String(new Date().getYear()).substr(1);\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst MONTHSL = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst LONG = {\n    NOW: \"just now\",\n    MIN: \" minute ago\",\n    MINS: \" minutes ago\",\n    HOUR: \" hour ago\",\n    HOURS: \" hours ago\",\n    DAY: \"yesterday\",\n    DAYS: \" days ago\",\n    WEEK: ' week ago',\n    WEEKS: ' weeks ago'\n};\nconst MID = {\n      NOW: \"now\",\n      MIN: \"min\",\n      MINS: \"mins\",\n      HOUR: \"hr\",\n      HOURS: \"hrs\",\n      DAY: \"dy\",\n      DAYS: \"dys\",\n      WEEK: 'wk',\n      WEEKS: 'wks'\n};\nconst SHORT = {\n      NOW: \"n\",\n      MIN: \"m\",\n      MINS: \"m\",\n      HOUR: \"h\",\n      HOURS: \"h\",\n      DAY: \"d\",\n      DAYS: \"d\",\n      WEEK: 'w',\n      WEEKS: 'w'\n};\n\nclass TimeLapsed{\n    static get version(){\n        return VERSION;\n    }\n\n    static fromTimestamp(seconds, notation=undefined, unsafe=true){\n        if (isNaN(seconds) && unsafe) {\n            throw new Error(\"Bad timestamp\");\n        }else if(isNaN(seconds) && !unsafe){\n            return 'N/A';\n        }\n\n        let secondsLapsed = (Date.now() - Number(seconds)) / 1000;\n        return this.deductSeconds(secondsLapsed, 'timestampStr', seconds, notation);\n    }\n    \n    static fromDateString(dateStr, notation=undefined, unsafe=true){\n        if (isNaN(Date.parse(String(dateStr))) && unsafe) {\n            throw new Error(\"Bad datestring\");\n        }else if (isNaN(Date.parse(String(dateStr))) && !unsafe){\n            return 'N/A';\n        }\n\n        let secondsLapsed = (Date.now() - Date.parse(String(dateStr))) / 1000;\n        return this.deductSeconds(secondsLapsed, 'dateStrStr', dateStr, notation);\n    }\n    \n    static parsedateStr(rawObj, type, notation){\n        let thedateStr = undefined\n        if (type === 'dateStrStr') {\n            thedateStr = new Date(String(rawObj));\n        }else if (type === 'timestampStr') {\n            thedateStr = new Date(Number(rawObj));\n        }else{\n            throw new Error(\"Unknown datetime format!\");\n        }\n\n        let theDate = thedateStr.getDate();\n        let timestrings = undefined;\n        let monthStr = undefined;\n        if (notation === 'twitter' || notation === 'mid') {\n            monthStr = MONTHS;\n        }else if (notation === 'lng' || notation === undefined || notation === null){\n            monthStr = MONTHSL;\n        }else{\n            throw new Error(\"Unknown notation format!\");\n        }\n\n        let theMonth = monthStr[thedateStr.getMonth()];\n        let theYear = String(thedateStr.getYear()).substr(1);\n        if (theYear < YEAR)\n            return theDate + ' ' + theMonth + ' ' + theYear;\n        else{\n            if (theDate < 10)\n                return '0' + theDate + ' ' + theMonth;\n            else\n                return theDate + ' ' + theMonth;\n        }\n    }\n\n    static floorTimeCalc(timeCalced){\n        return Math.floor(timeCalced);\n    }\n\n    static deductSeconds(secondsLapsed, type, rawObj, notation){\n        let timestrings = undefined;\n        if (notation === 'twitter') {\n            timestrings = SHORT;\n        }else if (notation === 'mid'){\n            timestrings = MID;\n        }else if (notation === 'lng' || notation === undefined || notation === null){\n            timestrings = LONG;\n        }else{\n            throw new Error(\"Unknown notation format!\");\n        }\n        \n        let postTime = undefined;\n        if (secondsLapsed < MINUTE) {\n            postTime = timestrings.NOW;\n        }else if (secondsLapsed >= MINUTE && secondsLapsed < HOUR) {\n            postTime = secondsLapsed / MINUTE;\n            postTime = this.floorTimeCalc(postTime);\n            if (postTime === 1) {\n                postTime += timestrings.MIN;\n            }else{\n                postTime += timestrings.MINS;\n            }\n        }else if (secondsLapsed >= HOUR && secondsLapsed < DAY) {\n            postTime = secondsLapsed / HOUR;\n            postTime = this.floorTimeCalc(postTime);\n            if (postTime === 1) {\n                postTime += timestrings.HOUR;\n            }else{\n                postTime += timestrings.HOURS;\n            }\n        }else if (secondsLapsed >= DAY && secondsLapsed < WEEK) {\n            postTime = secondsLapsed / DAY;\n            postTime = this.floorTimeCalc(postTime);\n            if (postTime === 1) {\n                if (timestrings === LONG)\n                    postTime = timestrings.DAY;\n                else\n                    postTime += timestrings.DAY;\n            }else{\n                postTime += timestrings.DAYS;\n            }\n        }else if (secondsLapsed >= WEEK && secondsLapsed < MONTH) {\n            postTime = secondsLapsed / WEEK;\n            postTime = this.floorTimeCalc(postTime);\n            if (postTime === 1) {\n                if (timestrings === LONG)\n                    postTime += timestrings.WEEK;\n                else\n                    postTime += timestrings.WEEK;\n            }else{\n                postTime += timestrings.WEEKS;\n            }\n        }else{\n            if (type === 'dateStrStr') {\n                postTime = this.parsedateStr(rawObj, type='dateStrStr', notation);\n            }else if (type === 'timestampStr') {\n                postTime = this.parsedateStr(rawObj, type='timestampStr', notation);\n            }\n        }\n        return postTime;\n    }\n}\n\nmodule.exports = TimeLapsed;"]},"metadata":{},"sourceType":"script"}